steps:
- name: 'gcr.io/cloud-builders/go'
  id: Install Go
  args: ['install', '.']
  env: ['PROJECT_ROOT=${_PROJECT_NAME}']
  volumes:
  - name: 'vol1'
    path: '/code_persist'
- name: 'gcr.io/cloud-builders/go'
  id: Build
  args: ['build', '${_PROJECT_NAME}']
  env: ['PROJECT_ROOT=${_PROJECT_NAME}']
- name: 'gcr.io/cloud-builders/go'
  id: Test
  args: ['test']
  env: ['PROJECT_ROOT=${_PROJECT_NAME}']
- name: 'gcr.io/cloud-builders/docker'
  id: Container Build 
  args:
  - 'build'
  - '-t'
  - 'gcr.io/$PROJECT_ID/${_PROJECT_NAME}:$SHORT_SHA'
  - '.'
- name: 'gcr.io/cloud-builders/docker'
  id: Push
  args:
  - 'push'
  - 'gcr.io/$PROJECT_ID/${_PROJECT_NAME}:$SHORT_SHA'
  env:
  - 'PROJECT_ID=$PROJECT_ID'
- name: 'gcr.io/cloud-builders/gcloud'
  id: GKE Create QA
  entrypoint: 'bash'
  args:
  - '-c'
  - | 
    gcloud container clusters create ${_PROJECT_NAME}-$BRANCH_NAME-$SHORT_SHA --zone=${_ZONE} --enable-network-policy --subnetwork=default || echo 'cluster already created'
#    [[ "$BRANCH_NAME" != "master" ]] && gcloud container clusters create ${_PROJECT_NAME}-$BRANCH_NAME-$SHORT_SHA --zone=${_ZONE} --enable-network-policy --subnetwork=default || echo 'cluster already created'
- name: 'gcr.io/cloud-builders/gcloud'
  id: Transform manifest
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
     sed -i "s/_PROJECT_NAME/${_PROJECT_NAME}/g;s/_SHORT_SHA/${SHORT_SHA}/g;s/_PROJECT_ID/${PROJECT_ID}/g" k8s/manifest.yaml | \
     sed -i "s/_PROJECT_NAME/${_PROJECT_NAME}/g" k8s/service.yaml 
  volumes:
  - name: 'vol1'
    path: '/code_persist'
- name: 'gcr.io/cloud-builders/kubectl'
  id: Create Deployment
  args:
  - 'apply'
  - '-R'
  - '-f'
  - 'k8s/'
  volumes:
  - name: 'vol1'
    path: '/code_persist'
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: /bin/sh
  id: Test Cluster
  args:
  - '-c'
  - |
     sleep 120 && test $(curl -s -I $(kubectl get services ${_PROJECT_NAME} --no-headers=true | awk '{print $4}') | grep HTTP/1.1 | awk {'print $2'}) -eq "200" && echo "All Tests Passed" || raise error "Application not active"
  waitFor:
  - 'Create Deployment'
- name: 'gcr.io/cloud-builders/gcloud'
  id: GKE Destroy QA
  entrypoint: 'bash'
  args:
  - '-c'
  - | 
    [[ ${_TEARDOWN} != false ]] && gcloud container clusters delete ${_PROJECT_NAME}-$BRANCH_NAME-$SHORT_SHA --zone=${_ZONE}  --quiet || echo 'Teardown not enabled or no cluster exists to delete'
  waitFor:
  - 'Test Cluster'
images: 
  - 'gcr.io/$PROJECT_ID/${_PROJECT_NAME}:$SHORT_SHA'
